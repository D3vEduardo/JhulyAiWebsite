generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean   @default(false)
  apiKey        ApiKey?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  chats         Chat[]
  image         String?
  sessions      Session[]
  accounts      Account[]

  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  role UserRole?

  @@index([createdAt])
  @@map("user")
}

model Message {
  id       String      @id @default(uuid())
  sender   User?       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String?
  role     MessageRole
  parts    Json        @default("[]") @db.JsonB
  chat     Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId, createdAt])
  @@index([senderId])
  @@map("message")
}

model Chat {
  id       String    @id @default(uuid())
  name     String
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId, createdAt])
  @@index([ownerId, updatedAt])
  @@map("chat")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@index([userId])
  @@index([expiresAt])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([userId])
  @@index([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([identifier])
  @@index([expiresAt])
  @@map("verification")
}

model ApiKey {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  key       String
  isActive  Boolean   @default(true)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([key])
  @@index([userId, isActive])
  @@map("api_key")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL

  @@map("message_role")
}

enum UserRole {
  USER
  ADMIN

  @@map("user_role")
}
